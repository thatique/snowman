// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: snowman.proto

package v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/gogo/protobuf/types"
	golang_proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = golang_proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Snowflake struct {
	ID                   ID       `protobuf:"bytes,1,opt,name=id,proto3,customtype=ID" json:"id"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Snowflake) Reset()         { *m = Snowflake{} }
func (m *Snowflake) String() string { return proto.CompactTextString(m) }
func (*Snowflake) ProtoMessage()    {}
func (*Snowflake) Descriptor() ([]byte, []int) {
	return fileDescriptor_39c2b57525ee9969, []int{0}
}
func (m *Snowflake) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Snowflake) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Snowflake.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Snowflake) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snowflake.Merge(m, src)
}
func (m *Snowflake) XXX_Size() int {
	return m.Size()
}
func (m *Snowflake) XXX_DiscardUnknown() {
	xxx_messageInfo_Snowflake.DiscardUnknown(m)
}

var xxx_messageInfo_Snowflake proto.InternalMessageInfo

type BatchIDsRequest struct {
	Length               int32    `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BatchIDsRequest) Reset()         { *m = BatchIDsRequest{} }
func (m *BatchIDsRequest) String() string { return proto.CompactTextString(m) }
func (*BatchIDsRequest) ProtoMessage()    {}
func (*BatchIDsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_39c2b57525ee9969, []int{1}
}
func (m *BatchIDsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BatchIDsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BatchIDsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BatchIDsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BatchIDsRequest.Merge(m, src)
}
func (m *BatchIDsRequest) XXX_Size() int {
	return m.Size()
}
func (m *BatchIDsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BatchIDsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BatchIDsRequest proto.InternalMessageInfo

func (m *BatchIDsRequest) GetLength() int32 {
	if m != nil {
		return m.Length
	}
	return 0
}

func init() {
	proto.RegisterType((*Snowflake)(nil), "snowman.api.v1.Snowflake")
	golang_proto.RegisterType((*Snowflake)(nil), "snowman.api.v1.Snowflake")
	proto.RegisterType((*BatchIDsRequest)(nil), "snowman.api.v1.BatchIDsRequest")
	golang_proto.RegisterType((*BatchIDsRequest)(nil), "snowman.api.v1.BatchIDsRequest")
}

func init() { proto.RegisterFile("snowman.proto", fileDescriptor_39c2b57525ee9969) }
func init() { golang_proto.RegisterFile("snowman.proto", fileDescriptor_39c2b57525ee9969) }

var fileDescriptor_39c2b57525ee9969 = []byte{
	// 270 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0xce, 0xcb, 0x2f,
	0xcf, 0x4d, 0xcc, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x83, 0x71, 0x13, 0x0b, 0x32,
	0xf5, 0xca, 0x0c, 0xa5, 0xa4, 0xd3, 0xf3, 0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0xb2, 0x49, 0xa5,
	0x69, 0xfa, 0xa9, 0xb9, 0x05, 0x25, 0x95, 0x10, 0xc5, 0x52, 0xba, 0xe9, 0x99, 0x25, 0x19, 0xa5,
	0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xe9, 0xf9, 0xe9, 0xf9, 0x08, 0x55, 0x20, 0x1e, 0x98, 0x03,
	0x66, 0x41, 0x94, 0x2b, 0xe9, 0x72, 0x71, 0x06, 0xe7, 0xe5, 0x97, 0xa7, 0xe5, 0x24, 0x66, 0xa7,
	0x0a, 0x29, 0x70, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x38, 0x09, 0x9c, 0xb8,
	0x27, 0xcf, 0x70, 0xeb, 0x9e, 0x3c, 0x93, 0xa7, 0xcb, 0x23, 0x30, 0x19, 0xc4, 0x94, 0x99, 0xa2,
	0xa4, 0xc9, 0xc5, 0xef, 0x94, 0x58, 0x92, 0x9c, 0xe1, 0xe9, 0x52, 0x1c, 0x94, 0x5a, 0x58, 0x9a,
	0x5a, 0x5c, 0x22, 0x24, 0xc6, 0xc5, 0x96, 0x93, 0x9a, 0x97, 0x5e, 0x92, 0x01, 0xd6, 0xc8, 0x1a,
	0x04, 0xe5, 0x19, 0x2d, 0x60, 0xe4, 0x12, 0x80, 0x1b, 0x1d, 0x9c, 0x5a, 0x54, 0x96, 0x99, 0x9c,
	0x2a, 0x64, 0xcb, 0xc5, 0xe6, 0x97, 0x5a, 0x51, 0xe2, 0xe9, 0x22, 0x24, 0xa6, 0x07, 0xf1, 0x85,
	0x1e, 0xcc, 0x7d, 0x7a, 0xae, 0x20, 0x5f, 0x48, 0x49, 0xea, 0xa1, 0xfa, 0x56, 0x0f, 0x6e, 0x86,
	0x12, 0x83, 0x90, 0x2f, 0x17, 0x37, 0xd8, 0x7a, 0xa8, 0x19, 0xf2, 0xe8, 0x6a, 0xd1, 0xdc, 0x86,
	0xd7, 0x30, 0x03, 0x46, 0x27, 0x91, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0,
	0x48, 0x8e, 0xf1, 0xc0, 0x63, 0x39, 0xc6, 0x28, 0xa6, 0x32, 0xc3, 0x24, 0x36, 0xb0, 0x8b, 0x8c,
	0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x0e, 0xdf, 0x27, 0xe6, 0x86, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SnowflakeServiceClient is the client API for SnowflakeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnowflakeServiceClient interface {
	NextID(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Snowflake, error)
	BatchNextID(ctx context.Context, in *BatchIDsRequest, opts ...grpc.CallOption) (SnowflakeService_BatchNextIDClient, error)
}

type snowflakeServiceClient struct {
	cc *grpc.ClientConn
}

func NewSnowflakeServiceClient(cc *grpc.ClientConn) SnowflakeServiceClient {
	return &snowflakeServiceClient{cc}
}

func (c *snowflakeServiceClient) NextID(ctx context.Context, in *types.Empty, opts ...grpc.CallOption) (*Snowflake, error) {
	out := new(Snowflake)
	err := c.cc.Invoke(ctx, "/snowman.api.v1.SnowflakeService/NextID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snowflakeServiceClient) BatchNextID(ctx context.Context, in *BatchIDsRequest, opts ...grpc.CallOption) (SnowflakeService_BatchNextIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SnowflakeService_serviceDesc.Streams[0], "/snowman.api.v1.SnowflakeService/BatchNextID", opts...)
	if err != nil {
		return nil, err
	}
	x := &snowflakeServiceBatchNextIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SnowflakeService_BatchNextIDClient interface {
	Recv() (*Snowflake, error)
	grpc.ClientStream
}

type snowflakeServiceBatchNextIDClient struct {
	grpc.ClientStream
}

func (x *snowflakeServiceBatchNextIDClient) Recv() (*Snowflake, error) {
	m := new(Snowflake)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SnowflakeServiceServer is the server API for SnowflakeService service.
type SnowflakeServiceServer interface {
	NextID(context.Context, *types.Empty) (*Snowflake, error)
	BatchNextID(*BatchIDsRequest, SnowflakeService_BatchNextIDServer) error
}

func RegisterSnowflakeServiceServer(s *grpc.Server, srv SnowflakeServiceServer) {
	s.RegisterService(&_SnowflakeService_serviceDesc, srv)
}

func _SnowflakeService_NextID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(types.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowflakeServiceServer).NextID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowman.api.v1.SnowflakeService/NextID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowflakeServiceServer).NextID(ctx, req.(*types.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SnowflakeService_BatchNextID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BatchIDsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SnowflakeServiceServer).BatchNextID(m, &snowflakeServiceBatchNextIDServer{stream})
}

type SnowflakeService_BatchNextIDServer interface {
	Send(*Snowflake) error
	grpc.ServerStream
}

type snowflakeServiceBatchNextIDServer struct {
	grpc.ServerStream
}

func (x *snowflakeServiceBatchNextIDServer) Send(m *Snowflake) error {
	return x.ServerStream.SendMsg(m)
}

var _SnowflakeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snowman.api.v1.SnowflakeService",
	HandlerType: (*SnowflakeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NextID",
			Handler:    _SnowflakeService_NextID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BatchNextID",
			Handler:       _SnowflakeService_BatchNextID_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "snowman.proto",
}

func (m *Snowflake) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snowflake) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	dAtA[i] = 0xa
	i++
	i = encodeVarintSnowman(dAtA, i, uint64(m.ID.Size()))
	n1, err1 := m.ID.MarshalTo(dAtA[i:])
	if err1 != nil {
		return 0, err1
	}
	i += n1
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *BatchIDsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BatchIDsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSnowman(dAtA, i, uint64(m.Length))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintSnowman(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Snowflake) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ID.Size()
	n += 1 + l + sovSnowman(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *BatchIDsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Length != 0 {
		n += 1 + sovSnowman(uint64(m.Length))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSnowman(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSnowman(x uint64) (n int) {
	return sovSnowman(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Snowflake) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnowman
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snowflake: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snowflake: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnowman
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSnowman
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSnowman
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSnowman(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnowman
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSnowman
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BatchIDsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnowman
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BatchIDsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BatchIDsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnowman
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSnowman(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSnowman
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSnowman
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSnowman(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSnowman
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnowman
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnowman
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSnowman
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSnowman
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSnowman
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSnowman(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSnowman
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSnowman = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSnowman   = fmt.Errorf("proto: integer overflow")
)
